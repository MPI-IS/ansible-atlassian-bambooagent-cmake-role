---
# tasks file for ansible-atlassian-bambooagent-cmake-role


- name: '[CMAKE] Checking that required variables are set'
  fail: msg="{{ item }} is not defined"
  when: item is undefined
  with_items:
    - cmake_installation
    - bambooagent_install_root

# checks if cmake is already there
- block:
  - name: '[BAMBOO] checks cmake version on OSX'
    shell: /usr/local/bin/cmake --version || cmake --version || echo 'cmake version 0.0'
    register: cmake_version_output_osx

  when: ansible_distribution=="MacOSX"

- block:
  - name: '[BAMBOO] checks cmake version on linux'
    shell: "{{bambooagent_install_root}}/usr/local/{{cmake_installation.subfolder}}/bin/cmake --version || cmake --version || echo 'cmake version 0.0'"
    register: cmake_version_output_linux

  when: ansible_distribution=="Ubuntu"

- block:
  # On Windows the command should be surrounded by " instead of ' for handling the spaces
  - name: '[BAMBOO] checks cmake version on Windows'
    win_shell: '{% raw %}\"C:\Program Files\CMake\bin\cmake.exe\"{% endraw %} --version & cmake --version & echo "cmake version 0.0"'
    args:
      executable: cmd
    register: cmake_version_output_windows
    #ignore_errors: yes
    when: ansible_os_family=="Windows"

- set_fact:
    cmake_version_output: "{{ (ansible_distribution=='Ubuntu') | ternary(cmake_version_output_linux, ((ansible_distribution=='MacOSX') | ternary(cmake_version_output_osx, cmake_version_output_windows) ) ) }}"

- debug:
    var: cmake_version_output


# Installs cmake
# Declares the cmake capabilities (to port into a role)

#
#
# OSX
#
#
- block:

  - name: "[CMAKE] Installs from DMG"
    include_role:
      name: raffienficiaud.atlassian-bambooagent-install-dmg-role
    vars:
      dmg_to_install: "{{ cmake_installation }}"

  - name: '[CMAKE] running cmake post install scripts'
    file:
       path=/usr/local/bin/
       state=directory

  - name: '[CMAKE] running cmake post install scripts'
    file:
       path=/usr/local/bin/{{item}}
       state=absent
    with_items:
     - cmake
     - ctest
     - cpack
     - ccmake

  - name: '[CMAKE] running cmake post install scripts'
    command: /Applications/CMake.app/Contents/bin/cmake-gui --install

  when:
    - ansible_distribution=="MacOSX"
    - (cmake_version_output.stdout_lines[0] | regex_replace('cmake version (.*)$', '\\1')) is version_compare('%d.%d' % (cmake_installation.version.major, cmake_installation.version.minor), '!=')


# installation folder on OSX
- name: '[BAMBOO] cmake root dir OSX'
  set_fact:
    bamboo_cmake_root_dir_osx: '/usr/local/bin/'


#
#
# Linux
#
#
- block:
  - name: '[CMAKE] create folder local to the bamboo agent'
    file:
       path="{{bambooagent_install_root}}/usr/local"
       state=directory
       mode=555

  - name: '[CMAKE] delete previous local cmake installation'
    file:
       path="{{bambooagent_install_root}}/usr/local/{{cmake_installation.subfolder}}"
       state=absent

  - name: '[CMAKE] linux installation'
    unarchive:
      src="{{ cmake_installation.file }}"
      dest="{{bambooagent_install_root}}/usr/local"
      copy=yes

  when:
    - ansible_distribution=='Ubuntu'
    - (cmake_version_output.stdout_lines[0] | regex_replace('cmake version (.*)$', '\\1')) is version_compare('%d.%d' % (cmake_installation.version.major, cmake_installation.version.minor), '!=')

# installation folder on Linux
- name: '[BAMBOO] cmake root dir Linux'
  set_fact:
    bamboo_cmake_root_dir_linux: '{{bambooagent_install_root}}/usr/local/{{cmake_installation.subfolder | default() }}/bin/'
  when: ansible_distribution=="Ubuntu"



#
#
# Windows
#
#
- block:

  - name: '[CMAKE] copy the installer'
    win_copy:
      src: "{{ cmake_installation.file }}"
      dest: "{{ ansible_env['TEMP'] }}\\{{cmake_installation.file | basename}}"

  # installs on a default folder
  - name: '[CMAKE] installation'
    win_package:
      path: "{{ ansible_env['TEMP'] }}\\{{cmake_installation.file | basename}}"
      state: present

  # installation folder on windows
  - win_reg_stat:
      path: HKLM:\SOFTWARE\Kitware\CMake
      name: InstallDir
    register: bamboo_cmake_root_dir_windows

  - debug:
      var: bamboo_cmake_root_dir_windows
  when: ansible_os_family=="Windows"

  rescue:
    - debug: msg="An error occured"
    - command: /bin/false

  always:
    # pretty sure that this file will not get cleaned up
    - win_file:
        path: "{{ ansible_env['TEMP'] }}\\{{cmake_installation.file | basename }}"
        state: absent

  tags:
    - cmake

- set_fact:
    bamboo_cmake_root_dir: "{{ (ansible_distribution=='Ubuntu') | ternary(bamboo_cmake_root_dir_linux, ((ansible_distribution=='MacOSX') | ternary(bamboo_cmake_root_dir_osx, bamboo_cmake_root_dir_windows.value ) ) ) }}"

# struggled several ours just to be able to add bin\ at the end ... found this solution ...
- set_fact:
    bamboo_cmake_root_dir: '{{ bamboo_cmake_root_dir }}bin\'
  when: ansible_os_family=="Windows"

- debug:
    var: bamboo_cmake_root_dir



#
# REGISTER cmake into bamboo capabilities
#

- name: '[BAMBOO] register cmake commands/capabilities'
  set_fact:
    bamboo_capabilities: "{{ bamboo_capabilities | combine({'system.builder.command.' + item:bamboo_cmake_root_dir + item + ((ansible_os_family=='Windows') | ternary('.exe','')) }) }}"
  with_items:
    - cmake
    - ctest
    - cpack

- name: '[BAMBOO] register cmake version'
  set_fact:
    bamboo_capabilities: "{{ bamboo_capabilities | combine({'cmake_version':('%d.%d' % (cmake_installation.version.major, cmake_installation.version.minor))}) }}"
